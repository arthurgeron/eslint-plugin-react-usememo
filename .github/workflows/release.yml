name: Release

on:
  push:
    branches:
      - main
jobs:
  install:
    name: Installing packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          
      - name: Read .tool-versions
        id: tool-versions
        run: |
          NODE_VERSION=$(grep "nodejs" .tool-versions | awk '{print $2}')
          YARN_VERSION=$(grep "yarn" .tool-versions | awk '{print $2}')
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "yarn_version=$YARN_VERSION" >> $GITHUB_OUTPUT

      - name: Use Node.js from .tool-versions
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.tool-versions.outputs.node_version }}
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'
          
      - name: Setup Yarn from .tool-versions
        run: |
          npm install -g yarn@${{ steps.tool-versions.outputs.yarn_version }}

      - name: Cache node modules
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true' # It will run install dependencies just if hash of yarn.lock changed
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GIT_PACKAGES_TOKEN }}

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          
      - name: Read .tool-versions
        id: tool-versions
        run: |
          NODE_VERSION=$(grep "nodejs" .tool-versions | awk '{print $2}')
          YARN_VERSION=$(grep "yarn" .tool-versions | awk '{print $2}')
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "yarn_version=$YARN_VERSION" >> $GITHUB_OUTPUT

      - name: Use Node.js from .tool-versions
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.tool-versions.outputs.node_version }}
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'
          
      - name: Setup Yarn from .tool-versions
        run: |
          npm install -g yarn@${{ steps.tool-versions.outputs.yarn_version }}

      - name: Restore node_modules
        uses: actions/cache@v3
        id: restore-build
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Restore jest cache
        uses: actions/cache@v3
        with:
          path: .jest-cache
          key: ${{ runner.os }}-${{ hashFiles('**/.jest-cache/**') }}

      - name: Run tests
        run: yarn test

  build:
    name: Test build
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          
      - name: Read .tool-versions
        id: tool-versions
        run: |
          NODE_VERSION=$(grep "nodejs" .tool-versions | awk '{print $2}')
          YARN_VERSION=$(grep "yarn" .tool-versions | awk '{print $2}')
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "yarn_version=$YARN_VERSION" >> $GITHUB_OUTPUT

      - name: Use Node.js from .tool-versions
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.tool-versions.outputs.node_version }}
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'
          
      - name: Setup Yarn from .tool-versions
        run: |
          npm install -g yarn@${{ steps.tool-versions.outputs.yarn_version }}

      - name: Restore node_modules
        uses: actions/cache@v3
        id: restore-build
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Run build
        run: yarn build

  deadcode:
    name: Find dead code
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          
      - name: Read .tool-versions
        id: tool-versions
        run: |
          NODE_VERSION=$(grep "nodejs" .tool-versions | awk '{print $2}')
          YARN_VERSION=$(grep "yarn" .tool-versions | awk '{print $2}')
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "yarn_version=$YARN_VERSION" >> $GITHUB_OUTPUT

      - name: Use Node.js from .tool-versions
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.tool-versions.outputs.node_version }}
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'
          
      - name: Setup Yarn from .tool-versions
        run: |
          npm install -g yarn@${{ steps.tool-versions.outputs.yarn_version }}

      - name: Restore node_modules
        uses: actions/cache@v3
        id: restore-build
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Find dead code
        run: yarn deadCode

  release:
    name: Release version
    runs-on: ubuntu-latest
    needs: [test, build, deadcode]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          
      - name: Read .tool-versions
        id: tool-versions
        run: |
          NODE_VERSION=$(grep "nodejs" .tool-versions | awk '{print $2}')
          YARN_VERSION=$(grep "yarn" .tool-versions | awk '{print $2}')
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "yarn_version=$YARN_VERSION" >> $GITHUB_OUTPUT

      - name: Use Node.js from .tool-versions
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.tool-versions.outputs.node_version }}
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'
          registry-url: 'https://registry.npmjs.org'
          scope: '@arthurgeron'
          
      - name: Setup Yarn from .tool-versions
        run: |
          npm install -g yarn@${{ steps.tool-versions.outputs.yarn_version }}

      - name: Restore node_modules
        uses: actions/cache@v3
        id: restore-build
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Publish Release
        uses: LumaKernel/npm-release-pack-action@v1.0.1
        id: release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_command: npm publish --access public
          generate_release_notes: true
